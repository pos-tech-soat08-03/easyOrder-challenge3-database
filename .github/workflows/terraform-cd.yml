name: Terraform CD - Deploy Database

# Workflow para deploy de Database com Terraform, config do disparo manual
on: 
  workflow_dispatch:
    inputs:
      environment:
        description: 'Ambiente de deployment (ex.: lab, staging, prod)'
        required: true
        default: 'prod'
      aws_access_key_id:
        description: 'AWS Access Key ID'
        required: true
      aws_secret_access_key:
        description: 'AWS Secret Access Key'
        required: true
      aws_session_token:
        description: 'AWS Session Token'
        required: true
      aws_account_id:
        description: 'AWS Account ID'
        required: true
      aws_backend_bucket:
        description: 'AWS S3 Bucket para armazenamento do estado do Terraform'
        required: true
      aws_region:
        description: 'AWS Region'
        required: true
        default: 'us-east-1'

jobs:
  terraform:
    name: Terraform Deployment
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:

    - name: Checkout CÃ³digo
      uses: actions/checkout@v3

    - name: Mascarar Credenciais
      run: |
        echo "::add-mask::${{ github.event.inputs.aws_access_key_id }}"
        echo "::add-mask::${{ github.event.inputs.aws_secret_access_key }}"
        echo "::add-mask::${{ github.event.inputs.aws_session_token }}"
        echo "::add-mask::${{ github.event.inputs.aws_account_id }}"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Configure AWS CLI 
      uses: aws-actions/configure-aws-credentials@v1
      with: 
        aws-access-key-id: ${{ github.event.inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ github.event.inputs.aws_secret_access_key }}
        aws-session-token: ${{ github.event.inputs.aws_session_token }}
        aws-region: ${{ github.event.inputs.aws_region }}
        
    - name: Verificar Credenciais AWS
      run: aws sts get-caller-identity

    - name: Gerar arquivo backend.tfvars (env do Terraform Database)
      working-directory: src/
      run: |
          cat <<EOF > backend.tfvars
          bucket = "${{ github.event.inputs.aws_backend_bucket }}"
          key    = "easyorder-database/terraform.tfstate"
          region = "${{ github.event.inputs.aws_region }}"
          EOF

    - name: Gerar arquivo external_var.tfvars (env do Terraform Infra)
      working-directory: src/
      run: |
          cat <<EOF > external_var.tfvars
          bucket_infra = "${{ github.event.inputs.aws_backend_bucket }}"
          key_infra    = "easyorder-infra/terraform.tfstate"
          region = "${{ github.event.inputs.aws_region }}"
          db_name = "${{ secrets.MYSQL_DATABASE }}"
          db_username = "${{ secrets.MYSQL_USER }}"
          db_password = "${{ secrets.MYSQL_ROOT_PASSWORD }}"
          EOF
    
    - name: Terraform Init
      working-directory: src/
      run: terraform init -backend-config=backend.tfvars

    - name: Terraform Validate
      working-directory: src/
      run: terraform validate

    - name: Terraform Plan
      working-directory: src/
      run: terraform plan -var-file=external_var.tfvars -out=plan.out

    - name: Terraform Apply
      working-directory: src/
      run: terraform apply -var-file=external_var.tfvars -auto-approve